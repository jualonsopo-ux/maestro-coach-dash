-- =========================================================
-- CRM Database for Supabase (full integration, from scratch)
-- Idempotent: safe to re-run
-- =========================================================

-- ========== 0) ENUMS ==========
DO $$ BEGIN
  CREATE TYPE public.lead_stage_enum AS ENUM
  ('S1 reservado','S1 hecho','S2 reservado','Propuesta','Ganado','Perdido');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
  CREATE TYPE public.activity_type_enum AS ENUM
  ('S1','S2','Pago','Nota','Email','Llamada','Reuni칩n','Mensaje');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
  CREATE TYPE public.lead_channel_enum AS ENUM
  ('instagram','google_ads','referido','org치nico','otros');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
  CREATE TYPE public.priority_enum AS ENUM
  ('baja','media','alta','critica');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

-- ========== 1) TABLES ==========
CREATE TABLE IF NOT EXISTS public.workspaces (
  id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name         TEXT NOT NULL,
  created_at   TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS public.members (
  id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  workspace_id  BIGINT NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
  user_id       UUID   NOT NULL, -- references auth.users(id)
  role          TEXT   NOT NULL DEFAULT 'owner',
  created_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
  UNIQUE (workspace_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.leads (
  id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  workspace_id     BIGINT NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
  owner_id         UUID   NOT NULL, -- references auth.users(id)
  full_name        TEXT   NOT NULL,
  email            TEXT,
  phone            TEXT,
  channel          public.lead_channel_enum,
  stage            public.lead_stage_enum NOT NULL DEFAULT 'S1 reservado',
  score            INT CHECK (score BETWEEN 0 AND 100),
  amount           NUMERIC(12,2),
  priority         public.priority_enum NOT NULL DEFAULT 'media',
  next_step        TEXT,
  due_at           TIMESTAMPTZ,
  last_contact_at  TIMESTAMPTZ,
  created_at       TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at       TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS public.tags (
  id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  workspace_id  BIGINT NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
  name          TEXT NOT NULL,
  created_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
  UNIQUE (workspace_id, name)
);

CREATE TABLE IF NOT EXISTS public.lead_tags (
  lead_id  BIGINT NOT NULL REFERENCES public.leads(id) ON DELETE CASCADE,
  tag_id   BIGINT NOT NULL REFERENCES public.tags(id)  ON DELETE CASCADE,
  PRIMARY KEY (lead_id, tag_id)
);

CREATE TABLE IF NOT EXISTS public.activities (
  id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  workspace_id  BIGINT NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
  lead_id       BIGINT NOT NULL REFERENCES public.leads(id) ON DELETE CASCADE,
  type          public.activity_type_enum NOT NULL,
  scheduled_at  TIMESTAMPTZ,
  done_at       TIMESTAMPTZ,
  amount        NUMERIC(12,2),
  notes         TEXT,
  created_by    UUID NOT NULL,
  created_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at    TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- ========== 2) RLS ==========
ALTER TABLE public.workspaces ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.members   ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.leads     ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tags      ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.lead_tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.activities ENABLE ROW LEVEL SECURITY;

-- Workspaces
DO $$ BEGIN
  CREATE POLICY wk_read  ON public.workspaces FOR SELECT USING (
    EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = workspaces.id AND m.user_id = auth.uid())
  );
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
  CREATE POLICY wk_write ON public.workspaces FOR UPDATE USING (
    EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = workspaces.id AND m.user_id = auth.uid())
  ) WITH CHECK (
    EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = workspaces.id AND m.user_id = auth.uid())
  );
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

-- Members
DO $$ BEGIN
  CREATE POLICY mb_read ON public.members FOR SELECT USING (
    user_id = auth.uid() OR
    EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = members.workspace_id AND m.user_id = auth.uid() AND m.role IN ('owner','admin'))
  );
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
  CREATE POLICY mb_write ON public.members FOR INSERT WITH CHECK (
    EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = members.workspace_id AND m.user_id = auth.uid() AND m.role IN ('owner','admin'))
  );
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

-- Leads
DO $$ BEGIN
  CREATE POLICY leads_select ON public.leads FOR SELECT USING (
    EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = leads.workspace_id AND m.user_id = auth.uid())
  );
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
  CREATE POLICY leads_insert ON public.leads FOR INSERT WITH CHECK (
    EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = leads.workspace_id AND m.user_id = auth.uid())
  );
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
  CREATE POLICY leads_update ON public.leads FOR UPDATE USING (
    EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = leads.workspace_id AND m.user_id = auth.uid())
    AND (leads.owner_id = auth.uid()
         OR EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = leads.workspace_id AND m.user_id = auth.uid() AND m.role IN ('owner','admin')))
  ) WITH CHECK (
    EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = leads.workspace_id AND m.user_id = auth.uid())
  );
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

-- Tags & Lead_Tags
DO $$ BEGIN
  CREATE POLICY tags_rw ON public.tags FOR ALL USING (
    EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = tags.workspace_id AND m.user_id = auth.uid())
  ) WITH CHECK (
    EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = tags.workspace_id AND m.user_id = auth.uid())
  );
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
  CREATE POLICY lead_tags_rw ON public.lead_tags FOR ALL USING (
    EXISTS (SELECT 1 FROM public.leads l JOIN public.members m ON m.workspace_id = l.workspace_id
            WHERE l.id = lead_tags.lead_id AND m.user_id = auth.uid())
  ) WITH CHECK (
    EXISTS (SELECT 1 FROM public.leads l JOIN public.members m ON m.workspace_id = l.workspace_id
            WHERE l.id = lead_tags.lead_id AND m.user_id = auth.uid())
  );
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

-- Activities
DO $$ BEGIN
  CREATE POLICY act_select ON public.activities FOR SELECT USING (
    EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = activities.workspace_id AND m.user_id = auth.uid())
  );
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
  CREATE POLICY act_insert ON public.activities FOR INSERT WITH CHECK (
    EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = activities.workspace_id AND m.user_id = auth.uid())
  );
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
  CREATE POLICY act_update ON public.activities FOR UPDATE USING (
    EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = activities.workspace_id AND m.user_id = auth.uid())
    AND (activities.created_by = auth.uid()
         OR EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = activities.workspace_id AND m.user_id = auth.uid() AND m.role IN ('owner','admin')))
  ) WITH CHECK (
    EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = activities.workspace_id AND m.user_id = auth.uid())
  );
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

-- ========== 3) FUNCTIONS & TRIGGERS ==========
CREATE OR REPLACE FUNCTION public.set_updated_at()
RETURNS TRIGGER LANGUAGE plpgsql 
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END$$;

DO $$ BEGIN
  CREATE TRIGGER set_leads_updated_at
  BEFORE UPDATE ON public.leads
  FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
  CREATE TRIGGER set_activities_updated_at
  BEFORE UPDATE ON public.activities
  FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

CREATE OR REPLACE FUNCTION public.lead_due_label(d TIMESTAMPTZ)
RETURNS TEXT LANGUAGE plpgsql IMMUTABLE 
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  IF d IS NULL THEN RETURN NULL; END IF;
  IF (d::date = now()::date) THEN RETURN 'Hoy';
  ELSIF (d::date = (now()::date + 1)) THEN RETURN 'Ma침ana';
  ELSIF (d < now()) THEN RETURN 'Vencido';
  ELSE RETURN NULL;
  END IF;
END$$;

CREATE OR REPLACE FUNCTION public.refresh_last_contact()
RETURNS TRIGGER LANGUAGE plpgsql 
SECURITY DEFINER
SET search_path = public
AS $$
BEGIN
  UPDATE public.leads l
  SET last_contact_at = sub.max_done
  FROM (
    SELECT lead_id, MAX(done_at) AS max_done
    FROM public.activities
    WHERE lead_id = NEW.lead_id
      AND done_at IS NOT NULL
      AND type IN ('Nota','Email','Llamada','Reuni칩n','Mensaje','S1','S2','Pago')
    GROUP BY lead_id
  ) sub
  WHERE l.id = sub.lead_id;

  RETURN NULL;
END$$;

DO $$ BEGIN
  CREATE TRIGGER activities_touch_lead
  AFTER INSERT OR UPDATE OF done_at, type ON public.activities
  FOR EACH ROW EXECUTE FUNCTION public.refresh_last_contact();
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

-- ========== 4) INDEXES ==========
CREATE INDEX IF NOT EXISTS idx_leads_stage_due    ON public.leads(stage, due_at);
CREATE INDEX IF NOT EXISTS idx_leads_owner        ON public.leads(owner_id);
CREATE INDEX IF NOT EXISTS idx_leads_lastcontact  ON public.leads(last_contact_at);
CREATE INDEX IF NOT EXISTS idx_activities_lead    ON public.activities(lead_id, type, done_at);
CREATE INDEX IF NOT EXISTS idx_lead_tags_lead     ON public.lead_tags(lead_id);
CREATE INDEX IF NOT EXISTS idx_lead_tags_tag      ON public.lead_tags(tag_id);

-- ========== 5) VIEWS ==========
CREATE OR REPLACE VIEW public.view_pipeline_cards AS
SELECT
  l.id           AS lead_id,
  l.workspace_id,
  l.full_name,
  l.email,
  l.channel,
  l.score,
  l.amount,
  l.stage,
  l.next_step,
  l.due_at,
  public.lead_due_label(l.due_at) AS due_label,
  COALESCE(
    (SELECT array_agg(t.name ORDER BY t.name)
     FROM public.lead_tags lt
     JOIN public.tags t ON t.id = lt.tag_id
     WHERE lt.lead_id = l.id),
    ARRAY[]::TEXT[]
  ) AS tags,
  l.owner_id,
  l.created_at
FROM public.leads l;

CREATE OR REPLACE VIEW public.view_contacts_table AS
SELECT
  l.id AS lead_id,
  l.workspace_id,
  l.full_name,
  l.email,
  l.stage,
  l.next_step,
  public.lead_due_label(l.due_at) AS due_label,
  CASE WHEN l.last_contact_at IS NULL THEN NULL
       ELSE (now()::date - l.last_contact_at::date) END::INT AS last_contact_days,
  l.amount,
  COALESCE(
    (SELECT array_agg(t.name ORDER BY t.name)
     FROM public.lead_tags lt
     JOIN public.tags t ON t.id = lt.tag_id
     WHERE lt.lead_id = l.id),
    ARRAY[]::TEXT[]
  ) AS tags
FROM public.leads l;

CREATE OR REPLACE VIEW public.view_need_attention AS
SELECT
  l.id AS lead_id,
  l.workspace_id,
  l.full_name,
  l.email,
  l.stage,
  l.next_step,
  CASE
    WHEN l.due_at IS NULL THEN NULL
    WHEN l.due_at < now() THEN 'Tarea vence pronto'
    WHEN l.due_at <= now() + interval '48 hours' THEN 'Tarea vence pronto'
    ELSE NULL
  END AS motivo,
  public.lead_due_label(l.due_at) AS due_label
FROM public.leads l
WHERE l.due_at IS NOT NULL
  AND (l.due_at < now() OR l.due_at <= now() + interval '48 hours');

CREATE OR REPLACE VIEW public.view_flag_s1_without_s2 AS
SELECT l.id AS lead_id, l.workspace_id
FROM public.leads l
WHERE EXISTS (
  SELECT 1 FROM public.activities a
  WHERE a.lead_id = l.id AND a.type = 'S1' AND a.done_at IS NOT NULL
)
AND NOT EXISTS (
  SELECT 1 FROM public.activities a
  WHERE a.lead_id = l.id AND a.type = 'S2' AND a.done_at IS NOT NULL
);

-- ========== 6) SEED (demo) ==========
-- demo owner (reemplaza por tu UUID si quieres)
INSERT INTO public.workspaces(name)
VALUES ('Marketplace Coaching')
ON CONFLICT DO NOTHING;

WITH ws AS (
  SELECT id FROM public.workspaces WHERE name = 'Marketplace Coaching' LIMIT 1
)
INSERT INTO public.members(workspace_id, user_id, role)
SELECT ws.id, '00000000-0000-0000-0000-000000000000'::uuid, 'owner' FROM ws
ON CONFLICT DO NOTHING;

-- Tags
WITH ws AS (SELECT id FROM public.workspaces WHERE name='Marketplace Coaching')
INSERT INTO public.tags(workspace_id, name)
SELECT ws.id, t FROM ws, (VALUES
 ('alta_prioridad'),('caliente'),('instagram'),('google_ads'),
 ('paquete_premium'),('precio')
) AS v(t)
ON CONFLICT DO NOTHING;

-- Leads base (Ana, Carlos, Laura)
WITH ws AS (SELECT id FROM public.workspaces WHERE name='Marketplace Coaching')
INSERT INTO public.leads(workspace_id, owner_id, full_name, email, channel, stage, score, amount, priority, next_step, due_at, last_contact_at)
SELECT ws.id, '00000000-0000-0000-0000-000000000000'::uuid, 'Ana Garc칤a',   'ana@example.com',   'instagram'::public.lead_channel_enum,
       'S1 reservado'::public.lead_stage_enum, 85, 1200, 'alta'::public.priority_enum,
       'Confirmar asistencia S1', (now()::date + 1)::timestamptz, (now()::date - 248)::timestamptz
FROM ws
UNION ALL
SELECT ws.id, '00000000-0000-0000-0000-000000000000'::uuid, 'Carlos Ruiz',  'carlos@example.com', 'google_ads'::public.lead_channel_enum,
       'S1 hecho'::public.lead_stage_enum, 92, 2400, 'alta'::public.priority_enum,
       'Enviar enlace S2', now()::date::timestamptz, (now()::date - 249)::timestamptz
FROM ws
UNION ALL
SELECT ws.id, '00000000-0000-0000-0000-000000000000'::uuid, 'Laura Mart칤n', 'laura@example.com',  'referido'::public.lead_channel_enum,
       'Propuesta'::public.lead_stage_enum, 78, 3600, 'media'::public.priority_enum,
       'Seguimiento propuesta', (now()::date - 1)::timestamptz, (now()::date - 250)::timestamptz
FROM ws
ON CONFLICT DO NOTHING;

-- Tagging para los leads base
WITH ws AS (SELECT id FROM public.workspaces WHERE name='Marketplace Coaching'),
     l  AS (SELECT id, full_name FROM public.leads WHERE workspace_id=(SELECT id FROM ws))
INSERT INTO public.lead_tags(lead_id, tag_id)
SELECT (SELECT id FROM l WHERE full_name='Ana Garc칤a'),
       (SELECT id FROM public.tags WHERE workspace_id=(SELECT id FROM ws) AND name='alta_prioridad')
ON CONFLICT DO NOTHING;

WITH ws AS (SELECT id FROM public.workspaces WHERE name='Marketplace Coaching'),
     l  AS (SELECT id, full_name FROM public.leads WHERE workspace_id=(SELECT id FROM ws))
INSERT INTO public.lead_tags(lead_id, tag_id)
SELECT (SELECT id FROM l WHERE full_name='Ana Garc칤a'),
       (SELECT id FROM public.tags WHERE workspace_id=(SELECT id FROM ws) AND name='instagram')
ON CONFLICT DO NOTHING;

WITH ws AS (SELECT id FROM public.workspaces WHERE name='Marketplace Coaching'),
     l  AS (SELECT id, full_name FROM public.leads WHERE workspace_id=(SELECT id FROM ws))
INSERT INTO public.lead_tags(lead_id, tag_id)
SELECT (SELECT id FROM l WHERE full_name='Carlos Ruiz'),
       (SELECT id FROM public.tags WHERE workspace_id=(SELECT id FROM ws) AND name='google_ads')
ON CONFLICT DO NOTHING;

WITH ws AS (SELECT id FROM public.workspaces WHERE name='Marketplace Coaching'),
     l  AS (SELECT id, full_name FROM public.leads WHERE workspace_id=(SELECT id FROM ws))
INSERT INTO public.lead_tags(lead_id, tag_id)
SELECT (SELECT id FROM l WHERE full_name='Carlos Ruiz'),
       (SELECT id FROM public.tags WHERE workspace_id=(SELECT id FROM ws) AND name='caliente')
ON CONFLICT DO NOTHING;

WITH ws AS (SELECT id FROM public.workspaces WHERE name='Marketplace Coaching'),
     l  AS (SELECT id, full_name FROM public.leads WHERE workspace_id=(SELECT id FROM ws))
INSERT INTO public.lead_tags(lead_id, tag_id)
SELECT (SELECT id FROM l WHERE full_name='Laura Mart칤n'),
       (SELECT id FROM public.tags WHERE workspace_id=(SELECT id FROM ws) AND name='paquete_premium')
ON CONFLICT DO NOTHING;

-- Activities base
WITH ws AS (SELECT id FROM public.workspaces WHERE name='Marketplace Coaching'),
     l_ana AS (SELECT id FROM public.leads WHERE full_name='Ana Garc칤a'   AND workspace_id=(SELECT id FROM ws)),
     l_carl AS (SELECT id FROM public.leads WHERE full_name='Carlos Ruiz' AND workspace_id=(SELECT id FROM ws)),
     l_laur AS (SELECT id FROM public.leads WHERE full_name='Laura Mart칤n'AND workspace_id=(SELECT id FROM ws))
INSERT INTO public.activities(workspace_id, lead_id, type, scheduled_at, done_at, amount, notes, created_by)
SELECT (SELECT id FROM ws), (SELECT id FROM l_ana),  'S1', now()+interval '1 day', NULL, NULL, 'Recordatorio asistencia S1', '00000000-0000-0000-0000-000000000000'::uuid
UNION ALL
SELECT (SELECT id FROM ws), (SELECT id FROM l_carl), 'S1', now()-interval '1 day', now()-interval '1 day', NULL, 'S1 realizado', '00000000-0000-0000-0000-000000000000'::uuid
UNION ALL
SELECT (SELECT id FROM ws), (SELECT id FROM l_carl), 'S2', now(), NULL, NULL, 'Enviar enlace S2', '00000000-0000-0000-0000-000000000000'::uuid
UNION ALL
SELECT (SELECT id FROM ws), (SELECT id FROM l_laur), 'Nota', NULL, now()-interval '2 day', NULL, 'Enviada propuesta', '00000000-0000-0000-0000-000000000000'::uuid
ON CONFLICT DO NOTHING;

-- Seed extra (30 leads aleatorios)
WITH ws AS (SELECT id FROM public.workspaces WHERE name='Marketplace Coaching')
INSERT INTO public.leads(workspace_id, owner_id, full_name, email, channel, stage, score, amount, priority, next_step, due_at, last_contact_at)
SELECT
  (SELECT id FROM ws),
  '00000000-0000-0000-0000-000000000000'::uuid,
  'Lead ' || gs,
  'lead' || gs || '@example.com',
  (ARRAY['instagram','google_ads','referido','org치nico','otros'])[(1 + (random()*4)::int)]::public.lead_channel_enum,
  (ARRAY['S1 reservado','S1 hecho','S2 reservado','Propuesta','Ganado','Perdido'])[(1 + (random()*5)::int)]::public.lead_stage_enum,
  (random()*60 + 20)::int,
  round((random()*4500 + 500)::numeric,2),
  (ARRAY['baja','media','alta','critica'])[(1 + (random()*3)::int)]::public.priority_enum,
  (ARRAY['Confirmar asistencia S1','Enviar enlace S2','Seguimiento propuesta','Llamar cliente','Enviar email'])[1 + (random()*4)::int],
  (now()::date + ((random()*4 - 2)::int))::timestamptz, -- ayer/hoy/ma침ana/췀2d
  now() - ((random()*300)::int || ' days')::interval
FROM generate_series(1,30) gs
ON CONFLICT DO NOTHING;

-- Auto-tagging aleatorio para seed extra
WITH ws AS (SELECT id FROM public.workspaces WHERE name='Marketplace Coaching'),
     lt AS (
       SELECT l.id AS lead_id,
              (SELECT id FROM public.tags WHERE workspace_id=(SELECT id FROM ws) ORDER BY random() LIMIT 1) AS tag_id
       FROM public.leads l WHERE l.workspace_id=(SELECT id FROM ws) AND l.full_name LIKE 'Lead %'
     )
INSERT INTO public.lead_tags(lead_id, tag_id)
SELECT lead_id, tag_id FROM lt
ON CONFLICT DO NOTHING;