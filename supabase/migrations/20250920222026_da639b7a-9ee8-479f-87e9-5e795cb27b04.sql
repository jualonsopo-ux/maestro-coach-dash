-- =========================================================
-- CRM Database for Supabase (full integration)
-- Idempotent: safe to re-run
-- =========================================================

-- ========== 0) ENUMS ==========
DO $$ BEGIN
  CREATE TYPE public.lead_stage_enum AS ENUM
  ('S1 reservado','S1 hecho','S2 reservado','Propuesta','Ganado','Perdido');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
  CREATE TYPE public.activity_type_enum AS ENUM
  ('S1','S2','Pago','Nota','Email','Llamada','Reunión','Mensaje');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
  CREATE TYPE public.lead_channel_enum AS ENUM
  ('instagram','google_ads','referido','orgánico','otros');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

DO $$ BEGIN
  CREATE TYPE public.priority_enum AS ENUM
  ('baja','media','alta','critica');
EXCEPTION WHEN duplicate_object THEN NULL; END $$;

-- ========== 1) TABLES ==========
CREATE TABLE IF NOT EXISTS public.workspaces (
  id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name         TEXT NOT NULL,
  created_at   TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS public.members (
  id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  workspace_id  BIGINT NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
  user_id       UUID   NOT NULL, -- references auth.users(id)
  role          TEXT   NOT NULL DEFAULT 'owner',
  created_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
  UNIQUE (workspace_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.leads (
  id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  workspace_id     BIGINT NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
  owner_id         UUID   NOT NULL, -- references auth.users(id)
  full_name        TEXT   NOT NULL,
  email            TEXT,
  phone            TEXT,
  channel          public.lead_channel_enum,
  stage            public.lead_stage_enum NOT NULL DEFAULT 'S1 reservado',
  score            INT CHECK (score BETWEEN 0 AND 100),
  amount           NUMERIC(12,2),
  priority         public.priority_enum NOT NULL DEFAULT 'media',
  next_step        TEXT,
  due_at           TIMESTAMPTZ,
  last_contact_at  TIMESTAMPTZ,
  created_at       TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at       TIMESTAMPTZ NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS public.tags (
  id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  workspace_id  BIGINT NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
  name          TEXT NOT NULL,
  created_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
  UNIQUE (workspace_id, name)
);

CREATE TABLE IF NOT EXISTS public.lead_tags (
  lead_id  BIGINT NOT NULL REFERENCES public.leads(id) ON DELETE CASCADE,
  tag_id   BIGINT NOT NULL REFERENCES public.tags(id)  ON DELETE CASCADE,
  PRIMARY KEY (lead_id, tag_id)
);

CREATE TABLE IF NOT EXISTS public.activities (
  id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  workspace_id  BIGINT NOT NULL REFERENCES public.workspaces(id) ON DELETE CASCADE,
  lead_id       BIGINT NOT NULL REFERENCES public.leads(id) ON DELETE CASCADE,
  type          public.activity_type_enum NOT NULL,
  scheduled_at  TIMESTAMPTZ,
  done_at       TIMESTAMPTZ,
  amount        NUMERIC(12,2),
  notes         TEXT,
  created_by    UUID NOT NULL,
  created_at    TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at    TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- ========== 2) RLS ==========
ALTER TABLE public.workspaces ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.members   ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.leads     ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.tags      ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.lead_tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.activities ENABLE ROW LEVEL SECURITY;

-- Workspaces (read/write only if member)
DROP POLICY IF EXISTS wk_read ON public.workspaces;
CREATE POLICY wk_read ON public.workspaces FOR SELECT USING (
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = workspaces.id AND m.user_id = auth.uid())
);

DROP POLICY IF EXISTS wk_write ON public.workspaces;
CREATE POLICY wk_write ON public.workspaces FOR UPDATE USING (
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = workspaces.id AND m.user_id = auth.uid())
) WITH CHECK (
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = workspaces.id AND m.user_id = auth.uid())
);

DROP POLICY IF EXISTS wk_insert ON public.workspaces;
CREATE POLICY wk_insert ON public.workspaces FOR INSERT WITH CHECK (true);

-- Members (read/write only if same workspace membership)
DROP POLICY IF EXISTS mb_read ON public.members;
CREATE POLICY mb_read ON public.members FOR SELECT USING (
  user_id = auth.uid() OR
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = members.workspace_id AND m.user_id = auth.uid() AND m.role IN ('owner','admin'))
);

DROP POLICY IF EXISTS mb_write ON public.members;
CREATE POLICY mb_write ON public.members FOR INSERT WITH CHECK (
  user_id = auth.uid() OR
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = members.workspace_id AND m.user_id = auth.uid() AND m.role IN ('owner','admin'))
);

-- Leads
DROP POLICY IF EXISTS leads_select ON public.leads;
CREATE POLICY leads_select ON public.leads FOR SELECT USING (
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = leads.workspace_id AND m.user_id = auth.uid())
);

DROP POLICY IF EXISTS leads_insert ON public.leads;
CREATE POLICY leads_insert ON public.leads FOR INSERT WITH CHECK (
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = leads.workspace_id AND m.user_id = auth.uid())
);

DROP POLICY IF EXISTS leads_update ON public.leads;
CREATE POLICY leads_update ON public.leads FOR UPDATE USING (
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = leads.workspace_id AND m.user_id = auth.uid())
  AND (leads.owner_id = auth.uid()
       OR EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = leads.workspace_id AND m.user_id = auth.uid() AND m.role IN ('owner','admin')))
) WITH CHECK (
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = leads.workspace_id AND m.user_id = auth.uid())
);

DROP POLICY IF EXISTS leads_delete ON public.leads;
CREATE POLICY leads_delete ON public.leads FOR DELETE USING (
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = leads.workspace_id AND m.user_id = auth.uid())
  AND (leads.owner_id = auth.uid()
       OR EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = leads.workspace_id AND m.user_id = auth.uid() AND m.role IN ('owner','admin')))
);

-- Tags & Lead_Tags
DROP POLICY IF EXISTS tags_rw ON public.tags;
CREATE POLICY tags_rw ON public.tags FOR ALL USING (
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = tags.workspace_id AND m.user_id = auth.uid())
) WITH CHECK (
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = tags.workspace_id AND m.user_id = auth.uid())
);

DROP POLICY IF EXISTS lead_tags_rw ON public.lead_tags;
CREATE POLICY lead_tags_rw ON public.lead_tags FOR ALL USING (
  EXISTS (SELECT 1 FROM public.leads l JOIN public.members m ON m.workspace_id = l.workspace_id
          WHERE l.id = lead_tags.lead_id AND m.user_id = auth.uid())
) WITH CHECK (
  EXISTS (SELECT 1 FROM public.leads l JOIN public.members m ON m.workspace_id = l.workspace_id
          WHERE l.id = lead_tags.lead_id AND m.user_id = auth.uid())
);

-- Activities
DROP POLICY IF EXISTS act_select ON public.activities;
CREATE POLICY act_select ON public.activities FOR SELECT USING (
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = activities.workspace_id AND m.user_id = auth.uid())
);

DROP POLICY IF EXISTS act_insert ON public.activities;
CREATE POLICY act_insert ON public.activities FOR INSERT WITH CHECK (
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = activities.workspace_id AND m.user_id = auth.uid())
);

DROP POLICY IF EXISTS act_update ON public.activities;
CREATE POLICY act_update ON public.activities FOR UPDATE USING (
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = activities.workspace_id AND m.user_id = auth.uid())
) WITH CHECK (
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = activities.workspace_id AND m.user_id = auth.uid())
);

DROP POLICY IF EXISTS act_delete ON public.activities;
CREATE POLICY act_delete ON public.activities FOR DELETE USING (
  EXISTS (SELECT 1 FROM public.members m WHERE m.workspace_id = activities.workspace_id AND m.user_id = auth.uid())
);

-- ========== 3) TRIGGERS ==========
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

DROP TRIGGER IF EXISTS update_leads_updated_at ON public.leads;
CREATE TRIGGER update_leads_updated_at 
  BEFORE UPDATE ON public.leads 
  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

DROP TRIGGER IF EXISTS update_activities_updated_at ON public.activities;
CREATE TRIGGER update_activities_updated_at 
  BEFORE UPDATE ON public.activities 
  FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();